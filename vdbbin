#!/usr/bin/env python

import os
import sys
import optparse
import traceback
import threading

import vdb
import vtrace
import vtrace.snapshot as vt_snap
import cobra

def usage():
    print 'Usage: vdb [options]'
    print '\t-S\t\tServer mode (start a vtrace server)'
    print '\t-v\t\tVerbose mode'
    print '\t-G\t\t(depreicated) GTK gui...'
    print '\t=Q\t\tQT gui!'
    print '\t-r\t\tRun after attach'
    print '\t-R <host>\tConnect to remote vdb server.'
    print '\t-p <pid> \tAttach to the given pid.'
    print '\t-s <file>\tLoad process snapshot from file'
    print '\t--gdb-server <server_info>\tAttach to gdbserver! ("--gdb-server help" for more)'
    sys.exit(0)

def usage_gdbserver():
    print 'NOTE: gdbserver is only tested for vmware... (qemu, openocd soon!)'
    print 'use: --gdb-server <gdb_host>:<gdb_port>:<gdb_arch>'
    print 'gdb_host - The host running the gdb stub'
    print 'gdb_port - The port listening on the host (tcp)'
    print 'gdb_arch - The target arch: i386 amd64 arm'
    print ''
    sys.exit(0)

def main():

    cmd = None
    pidstr = None
    gdbserver = None

    trace = None

    parser = optparse.OptionParser(prog='vdbbin')
    parser.add_option('-c', '--cmd', dest='command', default=None, help='Debug a fired command')
    parser.add_option('-p', '--process', dest='process', default=None, help='Attach to process by name or pid')
    parser.add_option('-Q', '--qt', dest='doqt', default=False, action='store_true', help='Run the QT gui')
    parser.add_option('-R', '--remote', dest='remotehost', default=None, help='Attach to remote VDB server')
    parser.add_option('-r', '--run', dest='dorunagain', default=False, action='store_true', help='Do not stop on attach')
    parser.add_option('-s', '--snapshot', dest='snapshot', default=None, help='Load a vtrace snapshot file')
    parser.add_option('-S', '--server', dest='doserver', default=False, action='store_true')
    parser.add_option('-v', '--verbose', dest='doverbose', default=False, action='store_true')
    parser.add_option('--android', dest='doandroid', default=False, action='store_true', help='Debug Android with ADB!')
    parser.add_option('-e', '--eventid', dest='eventid', default=None, type='int', help='Used for Windows JIT')

    options, argv = parser.parse_args(sys.argv[1:])

    # Handle some options before we even create a trace.
    vtrace.remote = options.remotehost # None by default

    plat=None
    platargs = {}
    if options.doandroid:
        import vdb.tools.android as v_utils_android
        v_utils_android.runVdbOnDroid()
        return

    if options.snapshot:
        print('Loading process snapshot...')
        trace = vt_snap.loadSnapshot(options.snapshot)

    if trace == None:
        trace = vtrace.getTrace(plat=plat, **platargs)

    db = vdb.Vdb(trace)
    db.runagain = options.dorunagain
    db.windows_jit_event = options.eventid

    if options.doqt:
        import vqt.main as vq_main
        import vdb.qt.windows as v_q_windows
        import vqt.colors as vq_colors
        #vq_main.startup(css=vq_colors.qt_matrix)
        vq_main.startup()
        qgui = v_q_windows.VdbWindow(db)
        qgui.show()

    if options.doserver:
        db.do_server('')

    if options.process:
        db.do_attach(options.process)

    elif options.command:
        trace.execute(options.command)

    if options.eventid:
        db.trace.setMeta('WindowsJitEvent', options.eventid)

    if options.doqt:
        vq_main.main()

    else:

        while not db.shutdown.isSet():
            try:

                db.cmdloop()

            except KeyboardInterrupt:
                if db.trace.isRunning():
                    db.trace.sendBreak()

            except SystemExit:
                break

            except:
                traceback.print_exc()

if __name__ == "__main__":
    sys.exit(main())

